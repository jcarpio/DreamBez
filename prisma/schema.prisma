// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  role          UserRole  @default(USER)
  credits       Int       @default(0)

  accounts      Account[]
  sessions      Session[]
  studios       Studio[]
  transactions  CreditTransaction[]
  stripeTransactions  StripeTransaction[]

  // Restored fields for Stripe subscriptions
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  // New relationship field for subscriptions
  subscriptions          Subscription[]

  // New relationship for user favorites
  favorites              FavoritePrediction[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

enum StudioStatus {
   Pending
   Processing
   Completed
   Failed
}

model Studio {
  id          String       @id @default(cuid())
  name        String
  type        String
  modelUser   String?
  modelVersion String?
  hf_lora     String?
  status      StudioStatus   @default(Pending)
  defaultHairStyle String?
  defaultUserHeight String?
  extraInfo   String?
  images      String[]
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  predictions Prediction[] @relation("StudioPredictions")

  @@map(name: "studios")
}

model Prediction {
  id       String  @id @default(cuid())
  pId       String?
  studioId  String
  studio   Studio  @relation("StudioPredictions", fields: [studioId], references: [id], onDelete: Cascade)
  status    String   @default("pending")
  hairStyle String?
  userHeight String?
  style     String?
  imageUrl  String?
  prompt    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // New fields for voting system
  isShared  Boolean  @default(false)  // Whether user decides to share the image publicly
  likesCount Int     @default(0)      // Counter for likes this image receives

  @@map(name: "predictions")
}

// New table to manage user favorites
model FavoritePrediction {
  id            String   @id @default(cuid())
  userId        String
  predictionId  String
  
  // Fields copied from Prediction for efficiency (avoid JOINs)
  imageUrl      String
  prompt        String?
  style         String?
  hairStyle     String?
  userHeight    String?
  status        String
  studioId      String
  studioName    String   // Studio name for display
  studioUserId  String   // ID of the user who created the original image
  studioUserName String? // Name of the user who created the image (to show "by @username")
  
  createdAt     DateTime @default(now()) // When it was added to favorites
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // A user cannot have the same prediction as favorite twice
  @@unique([userId, predictionId])
  @@index([userId])
  @@index([predictionId])
  @@map(name: "favorite_predictions")
}

enum TransactionType {
  PURCHASE
  USAGE
  REFUND
}

model StripeTransaction {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id])
  stripeSessionId       String   @unique
  stripePaymentIntentId String?
  amount                Int
  status                String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map(name: "stripe_transactions")
}

model CreditTransaction {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Int
  type      TransactionType
  createdAt DateTime @default(now())
}

model Subscription {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeSubscriptionId  String   @unique
  stripePriceId         String?
  stripeCurrentPeriodEnd DateTime?
  status                String
  credits               Int      @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  processed Boolean  @default(false)
}

model InvitationCode {
  id        String   @id @default(cuid())
  code      String   @unique
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
}
